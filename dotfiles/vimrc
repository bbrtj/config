"-------------------
"- GENERAL OPTIONS -
"-------------------

" EDITOR
function! s:setEditorOptions()
	set hidden
	set backupdir=~/.vim/.backup//
	set dir=~/.vim/.swap//
	set undodir=~/.vim/.undo//
	set history=1000
	set autoread
	set nrformats-=octal
	set tags=.ctags;$HOME
	filetype plugin on
	filetype indent off
	set sessionoptions-=options
	set mouse=a
endfunction

function! s:setColorSchemeOptions()
	color gruvbox
	set background=dark
	let g:gruvbox_termcolors=16
	let g:gruvbox_invert_selection=0
endfunction

" DISPLAY
function! s:setDisplayOptions()
	syntax on
	set synmaxcol=3000
	set listchars=tab:»\ ,space:·,trail:‼,nbsp:◦
	set nolist
	set sidescrolloff=5
	set wrap
	set nohlsearch
	set wildmenu
	set ruler
	set laststatus=0
	set showtabline=0
endfunction

" INDENTING AND EDITING
function! s:setEditingOptions()
	set ts=4 sw=4 noet
	set autoindent
	set smarttab
	set backspace=indent,eol,start
	set encoding=utf-8
endfunction

" SEARCHING
function! s:setSearchingOptions()
	set rtp+=~/.fzf
	set ignorecase
	set smartcase
	set incsearch
	set complete-=i
endfunction

"------------
"- KEY MAPS -
"------------

" GENERAL KEYBINDINGS
function! s:setGenericKeyMaps()
	noremap <c-c> <Esc>
	inoremap <c-c> <Esc>
	nnoremap <Space> <c-w><c-w>
	tnoremap <Space><Space> <c-\><c-n>

	nnoremap ' `
	nnoremap ` '
	nnoremap Y y$
	nnoremap <silent> J :bprev<CR>
	vnoremap J <nop>
	nnoremap <silent> K :bnext<CR>
	vnoremap K <nop>
	nnoremap <c-j> O<Esc>j
	nnoremap <c-k> o<Esc>k
	nnoremap go i<CR><Esc>
endfunction

" LEADER KEY BINDINGS
function! s:setLeaderKeyMaps()
	nnoremap <leader>, ,
	nnoremap <leader>oo :e ~/.vim/org/
	nnoremap <silent> <leader>x :Bw<CR>
	nnoremap <silent> <leader>X :Bw!<CR>
	nnoremap <leader>j J
	nnoremap <leader>k K
	vnoremap <leader>j J
	vnoremap <leader>k K
	nnoremap <silent> <leader>h :set hlsearch!<CR>
	nnoremap <silent> <leader>\ :call AvoidNerdTree(":e $MYVIMRC")<CR>
	nnoremap <silent> <leader>i :call SwapIdeMode()<CR>
	nnoremap <leader>du :cd ..<CR>:pwd<CR>
	nnoremap <leader>dl :pwd<CR>
	nnoremap <leader>dh :cd %:p:h<CR>:pwd<CR>
	nnoremap <silent> <leader>= :call execute("put =" . getline("."))<CR>
	vnoremap <leader>y "+y
	noremap <leader>p "+p
	noremap <leader>P "+P
endfunction

" COMMAND MODE BINDINGS
function! s:setCommandModeMaps()
	cnoremap &ss set ts=2 sw=2<CR>
	cnoremap &sss set ts=3 sw=3<CR>
	cnoremap &ssss set ts=4 sw=4<CR>
endfunction

" INSERT MODE BINDINGS
function! s:setInsertModeMaps()
	inoremap &<Tab> &
	inoremap &{ <c-g>u{<CR>}<Esc>
	inoremap &;{ <c-g>u{<CR>};<Esc>
	inoremap &,{ <c-g>u{<CR>},<Esc>
	inoremap &[ <c-g>u[<CR>]<Esc>
	inoremap &;[ <c-g>u[<CR>];<Esc>
	inoremap &,[ <c-g>u[<CR>],<Esc>
	inoremap &( <c-g>u(<CR>)<Esc>
	inoremap &;( <c-g>u(<CR>);<Esc>
	inoremap &,( <c-g>u(<CR>),<Esc>

	augroup vimrc_snippets
		autocmd!
		autocmd FileType php inoremap <buffer> &file <c-g><?php<CR><CR>class <CR>{<CR>}<CR><Esc>3kA
		autocmd FileType php inoremap <buffer> &th <c-g>u$this->
		autocmd FileType php inoremap <buffer> &prf <c-g>u<Esc>biprotected function <Esc>A()<CR>{<CR>}<Esc>kk$F)i
		autocmd FileType php inoremap <buffer> &pf <c-g>u<Esc>bipublic function <Esc>A()<CR>{<CR>}<Esc>kk$F)i
		autocmd FileType php inoremap <buffer> &prsf <c-g>u<Esc>biprotected static function <Esc>A()<CR>{<CR>}<Esc>kk$F)i
		autocmd FileType php inoremap <buffer> &psf <c-g>u<Esc>bipublic static function <Esc>A()<CR>{<CR>}<Esc>kk$F)i
		autocmd FileType php inoremap <buffer> &try <c-g>utry {<CR>}<CR>catch() {<CR>}<Esc>k0f(a

		autocmd FileType perl inoremap <buffer> &se <c-g>u$self->
		autocmd FileType perl inoremap <buffer> &my <c-g>umy () = @_;<Esc>F)i
		autocmd FileType perl inoremap <buffer> &moo <c-g>uhas '' => (<CR>);<Esc>O<Tab>is => 'ro',<Esc>k$F'i
		autocmd FileType perl inoremap <buffer> &dd <c-g>uuse Data::Dumper; die Dumper();<Esc>hi
		autocmd FileType perl inoremap <buffer> &try <c-g>utry {<CR>} catch {<CR>}<Esc>kO<Tab>
	augroup END
endfunction
"
"------------
"- COMMANDS -
"------------

" COMMANDS
function! s:setCommands()
	command! W w
	command! Wq wq
endfunction

" AUTOCOMMANDS
function! s:setAutocommands()
	augroup vimrc_autocommands
		autocmd!
		autocmd BufRead * call LoadLocalFileOptions()
		autocmd BufWritePre * call FixTrailingWhitespace()
		autocmd FileType nerdtree unmap <buffer> ?

		" save cursor position
		autocmd BufLeave * call AutoSaveWinView()
		autocmd BufEnter * call AutoRestoreWinView()

		" case sensitive completion
		au InsertEnter * set noignorecase
		au InsertLeave * set ignorecase

		autocmd FileType perl nnoremap <buffer> <leader>s :set filetype=pod<CR>
		autocmd FileType pod nnoremap <buffer> <leader>s :set filetype=perl<CR>
		autocmd FileType sql imapclear <buffer>
		autocmd FileType vorg nunmap <buffer> -
	augroup END
endfunction

function! s:loadLocalOptions()
	if filereadable(expand("~/.vim/.vimrc"))
		so ~/.vim/.vimrc
	endif
endfunction

"-----------
"- PLUGINS -
"-----------

function! s:setPluginOptions()

	" NERDTREE
	noremap <silent> <leader>t :NERDTreeVCS<CR>
	noremap <silent> <leader>T :NERDTreeFind<CR>
	let g:NERDTreeMinimalUI = 1

	" VDEBUG
	let g:vdebug_options = {}
	let g:vdebug_options["break_on_open"] = 0

	" GUTENTAGS
	let g:gutentags_ctags_tagfile = ".ctags"
	let g:gutentags_enabled = 0
	let g:gutentags_ctags_executable = "uctags"

	" FZF
	nnoremap <leader>ff :call AvoidNerdTree(":Files")<CR>
	nnoremap <leader>ft :call AvoidNerdTree(":Tags")<CR>
	nnoremap <leader>a :call AvoidNerdTree(":BTags")<CR>
	nnoremap <leader>l :call AvoidNerdTree(":Lines")<CR>
	nnoremap - :call AvoidNerdTree(":Buffers")<CR>
	nnoremap <leader>fm :call AvoidNerdTree(":Marks")<CR>
	nnoremap <leader>fc :call AvoidNerdTree(":Commits")<CR>
	nnoremap <leader>fC :call AvoidNerdTree(":BCommits")<CR>
	nnoremap <leader>fhf :call AvoidNerdTree(":History")<CR>
	nnoremap <leader>c :call AvoidNerdTree(":History:")<CR>
	nnoremap <leader>e :call AvoidNerdTree(":History/")<CR>

	nmap <leader><tab> <plug>(fzf-maps-n)
	imap <c-x><c-l> <plug>(fzf-complete-line)

	command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, "--skip-vcs-ignores", <bang>0)

	" ESEARCH
	map <leader>fr <Plug>(esearch)

	" SMART WORD
	map <leader>w  <Plug>(smartword-w)
	map <leader>b  <Plug>(smartword-b)

	" SIMPLE WORKSPACE
	let g:simplews_short_commands = 0

	" COMMENTARY
	nmap Q gcc
	vmap Q gc

	" JSONVIEWER
	command! Jv call jsonviewer#init()

	" EDITORCONFIG
	let g:EditorConfig_exclude_patterns = ['fugitive://.*']

endfunction

"--------------------
"- HELPER FUNCTIONS -
"--------------------

function! RunCommand(command)
	rightbelow new
	resize -10
	call append(0, split(system(a:command), "\n"))
	setlocal nomodifiable buftype=nofile nobuflisted bufhidden=wipe
	map <silent> <buffer> q :q<CR>
	map <silent> <buffer> <CR> :q<CR>
endfunction

function! FixTrailingWhitespace()
	let view = winsaveview()
	%s/\s\+$//ge
	call winrestview(view)
endfunction

function! AvoidNerdTree(comm)
	if exists("b:NERDTree")
		execute "normal \<c-w>w"
	endif
	execute a:comm
endfunction

function! AutoSaveWinView()
	if !exists("w:SavedBufView")
		let w:SavedBufView = {}
	endif
	let w:SavedBufView[bufnr("%")] = winsaveview()
endfunction

function! AutoRestoreWinView()
	let buf = bufnr("%")
	if exists("w:SavedBufView") && has_key(w:SavedBufView, buf)
		let v = winsaveview()
		let atStartOfFile = v.lnum == 1 && v.col == 0
		if atStartOfFile && !&diff
			call winrestview(w:SavedBufView[buf])
		endif
		unlet w:SavedBufView[buf]
	endif
endfunction

function! LoadLocalFileOptions()
	if strlen(&buftype) == 0
		let thisdir = expand("<afile>:p:h")
		while strlen(thisdir) > 1
			let vi = thisdir . "/.vi"
			if (filereadable(vi))
				let contents = readfile(vi, '', 1)[0]
				let width = strcharpart(contents, 0, 1)
				let rest = strcharpart(contents, 1)
				let type = rest ==# "et" ? "et" : "noet"
				execute "setlocal sw=" . width . " ts=" . width . " " . type
				break
			endif
			let thisdir = fnamemodify(thisdir, ":h")
		endwhile
	endif
endfunction

function! SwapIdeMode()
	if exists("g:ide_mode") && g:ide_mode
		let g:ide_mode = 0
		windo set norelativenumber
		windo set nolist
		set showtabline=1
		set laststatus=0
		let g:gutentags_enabled = 0
	else
		let g:ide_mode = 1
		windo set relativenumber
		windo set list
		set showtabline=1
		set laststatus=2
		let g:gutentags_enabled = 1
	endif
endfunction

"-----------------
"- CONFIGURATION -
"-----------------

execute pathogen#infect()
let mapleader = ","

call s:setEditorOptions()
call s:setColorSchemeOptions()
call s:setDisplayOptions()
call s:setEditingOptions()
call s:setSearchingOptions()

call s:setGenericKeyMaps()
call s:setLeaderKeyMaps()
call s:setCommandModeMaps()
call s:setInsertModeMaps()

call s:setCommands()
call s:setAutocommands()

call s:setPluginOptions()
call s:loadLocalOptions()

