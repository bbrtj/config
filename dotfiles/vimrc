"-------------------
"- GENERAL OPTIONS -
"-------------------

" EDITOR
function! s:setEditorOptions()
	set hidden
	set backupdir=~/.vim/.backup//
	set dir=~/.vim/.swap//
	set undodir=~/.vim/.undo//
	set history=1000
	set autoread
	set nrformats-=octal
	set tags=.ctags;$HOME
	filetype plugin on
	filetype indent off
	set sessionoptions-=options
	set mouse=a
endfunction

function! s:setColorSchemeOptions()
	color gruvbox
	set background=dark
	let g:gruvbox_termcolors=16
	let g:gruvbox_invert_selection=0
endfunction

" DISPLAY
function! s:setDisplayOptions()
	syntax on
	set synmaxcol=3000
	set listchars=tab:»\ ,space:·,trail:‼,nbsp:◦
	set list
	set sidescrolloff=5
	set wrap
	set nohlsearch
	set wildmenu
	set ruler
	set showtabline=1
	set laststatus=2
endfunction

" INDENTING AND EDITING
function! s:setEditingOptions()
	set ts=4 sw=4 noet
	set autoindent
	set smarttab
	set backspace=indent,eol,start
	set encoding=utf-8
endfunction

" SEARCHING
function! s:setSearchingOptions()
	set rtp+=~/.fzf
	set ignorecase
	set smartcase
	set incsearch
	set complete-=i
endfunction

"------------
"- KEY MAPS -
"------------

" GENERAL KEYBINDINGS
function! s:setGenericKeyMaps()
	noremap <c-c> <Esc>
	nnoremap r<c-c> <Nop>
	inoremap <c-c> <Esc>
	nnoremap <Space> <c-w><c-w>
	tnoremap <Space><Space> <c-\><c-n>

	nnoremap ' `
	nnoremap ` '
	nnoremap Y y$
	nnoremap <c-j> O<Esc>cc<Esc>j
	nnoremap <c-k> o<Esc>cc<Esc>k
	nnoremap go i<CR><Esc>
endfunction

" LEADER KEY BINDINGS
function! s:setLeaderKeyMaps()
	nnoremap <leader>, ,
	nnoremap <silent> <leader>x :Bw<CR>
	nnoremap <silent> <leader>X :Bw!<CR>
	nnoremap <silent> <leader>h :set hlsearch!<CR>

	vnoremap <leader>y "+y
	noremap <leader>p "+p
	noremap <leader>P "+P

	nnoremap <silent> <leader>i #*:set hlsearch<CR>
endfunction

" COMMAND MODE BINDINGS
function! s:setCommandModeMaps()
endfunction

" INSERT MODE BINDINGS
function! s:setInsertModeMaps()
	inoremap &<Tab> &
	inoremap &{ <c-g>u{<CR>}<Esc>
	inoremap &;{ <c-g>u{<CR>};<Esc>
	inoremap &,{ <c-g>u{<CR>},<Esc>
	inoremap &[ <c-g>u[<CR>]<Esc>
	inoremap &;[ <c-g>u[<CR>];<Esc>
	inoremap &,[ <c-g>u[<CR>],<Esc>
	inoremap &( <c-g>u(<CR>)<Esc>
	inoremap &;( <c-g>u(<CR>);<Esc>
	inoremap &,( <c-g>u(<CR>),<Esc>
endfunction

"------------
"- COMMANDS -
"------------

" COMMANDS
function! s:setCommands()
	command! W w
	command! Wq wq
endfunction

" AUTOCOMMANDS
function! s:setAutocommands()
	augroup vimrc_autocommands
		autocmd!
		autocmd BufWritePre * call FixTrailingWhitespace()
		autocmd BufWritePre * call FixTrailingNewlines()
		autocmd FileType nerdtree unmap <buffer> ?

		" case sensitive completion
		au InsertEnter * set noignorecase
		au InsertLeave * set ignorecase

		autocmd FileType * set synmaxcol=5000
	augroup END
endfunction

function! s:loadLocalOptions()
	if filereadable(expand("~/.vim/.vimrc"))
		so ~/.vim/.vimrc
	endif
endfunction

"-----------
"- PLUGINS -
"-----------

function! s:setPluginOptions()

	" NERDTREE
	noremap <silent> <leader>t :NERDTreeVCS<CR>
	noremap <silent> <leader>T :NERDTreeFind<CR>
	let g:NERDTreeMinimalUI = 1

	" GUTENTAGS
	let g:gutentags_ctags_tagfile = ".ctags"
	let g:gutentags_enabled = 1

	" FZF
	nnoremap <leader>ff :call AvoidNerdTree(":Files")<CR>
	nnoremap <leader>ft :call AvoidNerdTree(":Tags")<CR>
	nnoremap <leader>a :call AvoidNerdTree(":BTags")<CR>
	nnoremap <leader>l :call AvoidNerdTree(":Lines")<CR>
	nnoremap - :call AvoidNerdTree(":Buffers")<CR>
	nnoremap <leader>fm :call AvoidNerdTree(":Marks")<CR>
	nnoremap <leader>fc :call AvoidNerdTree(":Commits")<CR>
	nnoremap <leader>fC :call AvoidNerdTree(":BCommits")<CR>
	nnoremap <leader>fhf :call AvoidNerdTree(":History")<CR>
	nnoremap <leader>c :call AvoidNerdTree(":History:")<CR>
	nnoremap <leader>e :call AvoidNerdTree(":History/")<CR>

	imap <c-x><c-l> <plug>(fzf-complete-line)

	" ESEARCH
	map <leader>fr <Plug>(esearch)

	" COMMENTARY
	nmap Q gcc
	vmap Q gc

	" JSONVIEWER
	command! Jv call jsonviewer#init()

	" EDITORCONFIG
	let g:EditorConfig_exclude_patterns = ['fugitive://.*']

	" TAGBAR
	nnoremap <leader>y :TagbarToggle<CR>
	let g:tagbar_map_showproto = "r"
	let g:tagbar_map_togglefold = "za"
	let g:tagbar_map_jump = ["<CR>", "o"]

endfunction

"--------------------
"- HELPER FUNCTIONS -
"--------------------

function! FixTrailingWhitespace()
	let view = winsaveview()
	%s/\s\+$//ge
	call winrestview(view)
endfunction

function! FixTrailingNewlines()
	let lastl = line('$')
	let startl = lastl + 1
	while strlen(getline(startl - 1)) == 0
		let startl -= 1
	endwhile

	if startl < lastl
		call deletebufline('%', startl + 1, lastl)
	elseif startl > lastl
		call appendbufline('%', lastl, '')
	endif
endfunction

function! AvoidNerdTree(comm)
	if exists("b:NERDTree")
		execute "normal \<c-w>w"
	endif
	execute a:comm
endfunction

"-----------------
"- CONFIGURATION -
"-----------------

execute pathogen#infect()
let mapleader = ","

call s:setEditorOptions()
call s:setColorSchemeOptions()
call s:setDisplayOptions()
call s:setEditingOptions()
call s:setSearchingOptions()

call s:setGenericKeyMaps()
call s:setLeaderKeyMaps()
call s:setCommandModeMaps()
call s:setInsertModeMaps()

call s:setCommands()
call s:setAutocommands()

call s:setPluginOptions()
call s:loadLocalOptions()

