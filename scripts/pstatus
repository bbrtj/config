#!/usr/bin/env perl

use strict;
use warnings;
use utf8;
use autodie;
use Getopt::Long;

my %args = (
	battery => $ENV{BATTERY_NAME},
	sound_device => $ENV{SOUND_DEVICE},
	type => undef,
	update => 0,
	timeout => 15,
	separator => " ",
);

GetOptions(
	"battery=s" => \$args{battery},
	"sound_device=s" => \$args{sound_device},
	"update" => \$args{update},
	"type=s" => \$args{type},
	"timeout=i" => \$args{timeout},
	"separator=s" => \$args{separator},
);

sub time_module {
	my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime();
	my $clock_symbol = "";

	return sprintf("$clock_symbol %02d:%02d", $hour, $min);
}

sub calendar_module {
	my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime();
	my $weekday = [qw(Mon Tue Wed Thu Fri Sat Sun)]->[$wday - 1];
	my $calendar_symbol = "";

	return "$calendar_symbol $mday, $weekday";
}

sub uptime_module {
	my $uptime = "/proc/uptime";
	my $uptime_symbol = "";
	my $upsec = do {
		open my $fh, "<", $uptime;
		my $line = readline $fh;
		chomp $line;
		my ($up, $idle) = split /\s/, $line;
		$up;
	};

	my $days = int($upsec / 60 / 60 / 24);
	my $hours = int($upsec / 60 / 60) % 24;
	my $minutes = int($upsec / 60) % 60;
	my $days_string = $days > 0 ? $days . "d " : "";

	return "$uptime_symbol $days_string${hours}h ${minutes}m";
}

sub battery_module {
	return unless $args{battery};
	my $battery = "/sys/class/power_supply/$args{battery}";
	my @battery_levels = ("", "", "", "");
	my $battery_charging = "";

	if (-d $battery) {
		my $percent = do {
			open my $capacity, "<", "$battery/capacity";
			readline $capacity;
		};
		my $charging = do {
			open my $status, "<", "$battery/status";
			readline $status;
		};

		chomp $percent;
		chomp $charging;

		my $level = $battery_charging;
		if ($charging =~ /discharging/i) {
			my $result = int(log($percent) / log(2));
			$level = $battery_levels[$result > 3 ? $result - 3 : 0];
		}

		return "$level $percent";
	}
	return "$battery_levels[0] ?";
}

sub sound_module {
	return unless $args{sound_device};
	my $soundcmd = "amixer -M sget $args{sound_device}";
	my @sound_levels = ("", "", "");
	my $ret = `$soundcmd`;
	if ($? == 0 && $ret =~ /playback channels: (.*?)$/im) {
		my @sources = map { s#^\s*|\s*$##gr } split /-/, $1;
		if ($ret =~ /$sources[0]: playback (?:.*?) \[(\d+)%\](?:.*?) \[on\]$/im) {
			my $percent = $1;
			my $level = $sound_levels[int(($percent - 1) / 100 * @sound_levels)];
			return "$level $percent";
		}
	}
	return "$sound_levels[0] ?";
}

sub ram_module {
	my $meminfo = "/proc/meminfo";
	my $ram_indicator = "";

	if (-f $meminfo) {
		my $data = do {
			open my $fh, "<", $meminfo;
			my %data;

			while (my $line = <$fh>) {
				chomp $line;
				if ($line =~ /(MemTotal|MemFree|Buffers|Cached):\s+(\d+) kB/) {
					$data{$1} = $2;
					last if scalar keys(%data) == 4;
				}
			}
			\%data;
		};
		if (scalar keys(%$data) == 4) {
			my $level = int(1000 * ($data->{MemTotal} - $data->{MemFree} - $data->{Buffers} - $data->{Cached}) / $data->{MemTotal}) / 10;
			return "$ram_indicator $level";
		}

	}
	return "$ram_indicator ?";
}

while (1) {
	my @modules;
	for ($args{type}) {
		if (!defined) {
			@modules = \(&battery_module, &sound_module, &ram_module);
		} elsif (/time/) {
			@modules = \(&time_module, &calendar_module, &uptime_module);
		}
	}

	my $compiled = do {
		my @list = grep { defined } map { $_->() } @modules;

		join " $args{separator} ", @list;
	};
	system(qq<xsetroot -name " $compiled ">);

	last if $args{update};
	sleep $args{timeout};
}
