#!/usr/bin/env perl

use strict;
use warnings;
use utf8;
use autodie;
use Getopt::Long;
use Time::Piece;

my %args = (
	type => undef,
	update => 0,
	timeout => 15,
	separator => " ",
);

GetOptions(
	"update" => \$args{update},
	"type=s" => \$args{type},
	"timeout=i" => \$args{timeout},
	"separator=s" => \$args{separator},
);

sub time_module {
	my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime();
	my $clock_symbol = "";

	return sprintf("$clock_symbol %02d:%02d", $hour, $min);
}

sub calendar_module {
	my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime();
	my $weekday = [qw(Mon Tue Wed Thu Fri Sat Sun)]->[$wday - 1];
	my $calendar_symbol = "";

	return "$calendar_symbol $mday, $weekday";
}

sub uptime_module {
	my $command = "sysctl -n";
	my $uptime_symbol = "";
	my $boottime = `$command kern.boottime`;

	if ($boottime =~ /sec \s = \s (\d+)/x) {
		$boottime = $1;
	}
	my $upsec = time - $boottime;

	my $days = int($upsec / 60 / 60 / 24);
	my $hours = int($upsec / 60 / 60) % 24;
	my $minutes = int($upsec / 60) % 60;
	my $days_string = $days > 0 ? $days . "d " : "";

	return "$uptime_symbol $days_string${hours}h ${minutes}m";
}

sub battery_module {
	my $command = "sysctl -n";
	my $battery = "hw.acpi.battery.life";
	my $acline = "hw.acpi.acline";
	my @battery_levels = ("", "", "", "");
	my $battery_charging = "";

	my $percent = do {
		open my $capacity, "-|", "$command $battery";
		readline $capacity;
	};
	my $charging = do {
		open my $status, "-|", "$command $acline";
		readline $status;
	};

	chomp $percent;
	chomp $charging;

	my $level = $battery_charging;
	if (!$charging) {
		my $result = int(log($percent || 0) / log(2));
		$level = $battery_levels[$result > 3 ? $result - 3 : 0];
	}

	return "$level $percent";
}

sub sound_module {
	my $soundcmd = "mixer -S vol";
	my @sound_levels = ("", "", "");
	my $ret = `$soundcmd`;
	if ($? == 0 && $ret =~ /vol:(\d+)/im) {
		my $percent = $1;
		my $level = $sound_levels[int(($percent - 1) / 100 * @sound_levels)];
		return "$level $percent";
	}
	return "$sound_levels[0] ?";
}

sub ram_module {
	my $command = "sysctl -n";
	my $ram_indicator = "";

	my $active = `$command vm.stats.vm.v_active_count`;
	my $wired = `$command vm.stats.vm.v_wire_count`;
	my $total = `$command vm.stats.vm.v_page_count`;

	if ($active && $wired && $total) {
		my $level = int(1000 * ($active + $wired) / $total) / 10;
		return "$ram_indicator $level";
	}

	return "$ram_indicator ?";
}

while (1) {
	my @modules;
	for ($args{type}) {
		if (!defined) {
			@modules = \(&battery_module, &sound_module, &ram_module);
		} elsif (/time/) {
			@modules = \(&time_module, &calendar_module, &uptime_module);
		}
	}

	my $compiled = do {
		my @list = grep { defined } map { $_->() } @modules;

		join " $args{separator} ", @list;
	};
	system(qq<xsetroot -name " $compiled ">);

	last if $args{update};
	sleep $args{timeout};
}

