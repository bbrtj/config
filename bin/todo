#!/usr/bin/env perl

use v5.30;
use warnings;
use autodie;
use Time::Piece;
use Time::Seconds;

use constant TODO_DIR => $ENV{HOME} . '/.todo';
my $now = localtime;
my $today = $now->dmy;
my $yesterday = ($now - ONE_DAY)->dmy;
my @today_todo;

binmode STDOUT, ':encoding(utf8)';
binmode STDIN, ':encoding(utf8)';

sub prompt
{
	my ($text, $bool) = @_;
	print "$text: ";

	my $res = scalar <STDIN>;
	chomp $res;

	return length $res == 0 || $res =~ /^[yY]/
		if $bool;

	return $res;
}

sub get_todos
{
	my ($file) = @_;
	open my $fh, '<:encoding(utf-8)', $file;

	my @todos = <$fh>;
	my @done = grep { $todos[$_] =~ /^- \[x\]/ } 0 .. $#todos;
	@todos = map { substr $_, 6 } @todos;
	chomp @todos;

	return (@todos, \@done);
}

sub put_todos
{
	my ($file, @todos) = @_;
	my %done = map { $_ => 1 } @{pop @todos};

	open my $fh, '>:encoding(utf-8)', $file;
	@todos = map {
		($done{$_}
			? '- [x] '
			: '- [ ] '
		) . $todos[$_]
	} 0 .. $#todos;

	say {$fh} $_ for @todos;
	return;
}

sub todo_filename { sprintf("%s/%s.vorg", TODO_DIR, shift) }

sub setup
{
	mkdir TODO_DIR
		if !-e TODO_DIR;

	if (!-e (my $tf = todo_filename $today)) {
		my @todos;

		if (-e (my $yf = todo_filename $yesterday)) {
			my @yesterday_todos = get_todos $yf;
			my %yesterday_done = map { $_ => 1 } @{pop @yesterday_todos};
			@yesterday_todos = map { $yesterday_todos[$_] } grep { !$yesterday_done{$_} } 0 .. $#yesterday_todos;
			if (@yesterday_todos > 0 && prompt('Setting up for today. Import undone from yesterday?', 1)) {
				@todos = @yesterday_todos;
			}
		}

		put_todos $tf, @todos, [];
	}
}

sub list
{
	my @todos = get_todos todo_filename $today;
	my %done = map { $_ => 1 } @{pop @todos};
	@todos = map { "$_: $todos[$_]" } 0 .. $#todos;

	say for map { $todos[$_] } grep { !$done{$_} } 0 .. $#todos;
	say 'Nothing for today!'
		unless @todos;
}

sub add_new
{
	my ($new) = @_;
	my $fn = todo_filename $today;

	my @todos = get_todos $fn;
	my @done = @{pop @todos};
	push @todos, $new;
	put_todos $fn, @todos, \@done;
}

sub complete
{
	my ($num) = @_;
	my $fn = todo_filename $today;

	my @todos = get_todos $fn;
	my @done = @{pop @todos};
	push @done, $num;
	put_todos $fn, @todos, \@done;
}

setup;
my ($arg) = @ARGV;
if (!$arg) {
	list;
}
elsif ($arg eq 'vi') {
	system("vi " . todo_filename $today);
}
elsif ($arg eq 'ranger') {
	system("ranger " . TODO_DIR);
}
elsif ($arg eq 'a') {
	my $new = prompt 'New todo';
	add_new $new;
	list;
}
elsif ($arg =~ /^-\d$/) {
	my $num = substr $arg, 1;
	complete $num;
	list;
}
else {
	say 'Usage: todo [a | vi | ranger | -N]';
}

