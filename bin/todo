#!/usr/bin/env perl

use v5.30;
use warnings;
use autodie;
use Time::Piece;
use Time::Seconds;

use File::Basename qw(dirname);
use lib dirname(dirname(__FILE__)) . '/lib';
use CommandHelpers dir => 'todo';

binmode STDOUT, ':encoding(utf8)';
binmode STDIN, ':encoding(utf8)';

sub todo_filename
{
	my $when = shift;
	my $time;

	if (!$when) {
		$time = localtime()->dmy;
	}
	elsif ($when =~ /\A-\d+\z/) {
		$time = (localtime() + $when * ONE_DAY)->dmy;
	}
	else {
		return $when;
	}

	return sprintf("%s/%s.md", DATA_DIR, $time);
}

sub get_todos
{
	my $file = todo_filename @_;
	open my $fh, '<:encoding(utf-8)', $file;

	my @todos;
	for my $line (readline $fh) {
		next unless $line =~ /^- \[/;

		chomp $line;
		push @todos, {
			content => substr($line, 6),
			done => scalar($line =~ /^- \[x\]/),
		};
	}

	@todos;
}

sub put_todos
{
	my @todos = @_;
	my $file = todo_filename;

	open my $fh, '>:encoding(utf-8)', $file;
	for my $todo (@todos) {
		my $prefix = $todo->{done}
			? '- [x] '
			: '- [ ] '
			;

		say {$fh} $prefix . $todo->{content};
	}

	return;
}

sub prompt
{
	my ($text, $bool) = @_;
	print "$text: ";

	my $res = scalar <STDIN>;
	chomp $res;

	return length $res == 0 || $res =~ /^[yY]/
		if $bool;

	return $res;
}

sub setup
{
	if (!-e todo_filename) {
		my @todos;

		if (-e (my $yf = todo_filename -1)) {
			my @yesterday_todos = get_todos $yf;
			my @yesterday_undone = grep { !$_->{done} } @yesterday_todos;
			if (@yesterday_undone > 0 && prompt('Setting up for today. Import undone from yesterday?', 1)) {
				@todos = @yesterday_undone;
			}
		}

		put_todos @todos;
	}
}

sub list
{
	my @todos = get_todos;
	for (0 .. $#todos) {
		$todos[$_]->{content} = "$_: " . $todos[$_]->{content};
	}

	@todos = grep { !$_->{done} } @todos;

	say for map { $_->{content} } @todos;
	say 'Nothing for today!'
		unless @todos;
}

sub add_new
{
	my ($new) = @_;

	my @todos = get_todos;
	push @todos, { content => $new };
	put_todos @todos;
}

sub complete
{
	my ($num) = @_;

	my @todos = get_todos;
	die 'invalid number'
		if $num > $#todos;

	$todos[$num]->{done} = 1;
	put_todos @todos;
}

setup;
my ($arg) = @ARGV;
if (!$arg) {
	list;
}
elsif ($arg eq 'vi') {
	system("vi " . todo_filename);
}
elsif ($arg eq 'list') {
	system("list " . DATA_DIR);
}
elsif ($arg eq 'a') {
	my $new = prompt 'New todo';
	add_new $new;
	list;
}
elsif ($arg =~ /^-\d+$/) {
	my $num = substr $arg, 1;
	complete $num;
	list;
}
else {
	say 'Usage: todo [a | vi | list | -N]';
}

